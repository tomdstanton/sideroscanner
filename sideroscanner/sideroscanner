#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'Tom Stanton'
__title__ = 'SideroScanner'
__version__ = '0.0.5'
__author_email__ = 'T.D.Stanton@sms.ed.ac.uk'
__description__ = 'A tool for annotating IROMPs in bacteria'
__license__ = 'gpl-3.0'

from argparse import RawTextHelpFormatter, ArgumentParser, SUPPRESS
from datetime import datetime
from os import path, uname, cpu_count
from shutil import get_terminal_size
from sys import exit
import pandas as pd
from Bio.SeqIO import parse
from io import StringIO
from multiprocessing import Pool

import sideroscanner
from sideroscanner.methods.process_input import check_seq, proteins_from_seq
from sideroscanner.methods.annotation import domain_filter, annotate
from sideroscanner.methods.export import export_proteins
from sideroscanner.methods.fetch import fetch_url
from sideroscanner.methods.flanks import flank_screen
from sideroscanner.methods.location import plasmid_mge_screen
from sideroscanner.methods.tfbs import tfbs_screen
from sideroscanner.methods.logo import print_logo
from sideroscanner.tools.hmmer3 import run_hmmpress

if __name__ == "__main__":

    dbpath = f'{path.dirname(sideroscanner.__file__)}/data'
    mgepath = f'{dbpath}/mgedb'
    plspath = f'{dbpath}/plsdb'
    flankpath = f'{dbpath}/flankdb'
    furpath = f'{dbpath}/furdb'
    iromppath = f'{dbpath}/irompdb'
    blastdb = f'{iromppath}/irompdb'
    lib = f'{iromppath}/iromps.hmm'

    parser = ArgumentParser(add_help=False,
                            formatter_class=RawTextHelpFormatter,
                            usage="sideroscanner [options] <IN.fasta>",
                            description='''
SideroScannner: a tool for annotating IROMPs in bacteria
-----------------------------------------------------------------''')

    group = parser.add_argument_group("Options")

    group.add_argument('-o', metavar='-', nargs='?', type=str,
                       const=f'sideroscanner_{datetime.today().strftime("%d%m%y_%H%M")}.csv',
                       help='''output results.csv instead of markdown STDOUT
[optional: path/to/output/file]
[default: sideroscanner_DDMMYY_hhmm.csv]
-----------------------------------------------''')
    group.add_argument('-l', metavar='int', nargs='?', type=int, const=90,
                       help='''genomic location screen
[optional: blastn percid] [default: 90]
-----------------------------------------------''')
    group.add_argument('-f', metavar='int', nargs='?', type=int, const=3,
                       help='''flanking CDS screen
[optional: number of up/downstream CDS]
[default: 3]
-----------------------------------------------''')
    group.add_argument('-b', metavar='int', nargs='?', type=int, const=200,
                       help='''Fur binding site screen
[optional: length of promoter region]
[default: 200]
-----------------------------------------------''')
    group.add_argument('-e', metavar='-', nargs='?', type=str,
                       const='',
                       help='''export annotated proteins
[optional: path/to/export/fasta]
[default: filename_sideroscanner.faa]
-----------------------------------------------''')
    group.add_argument('-t', metavar='int', type=int, default=cpu_count(),
                       help=f'''number of threads [default: all]
-----------------------------------------------''')
    group.add_argument('--lowqual', metavar='-', nargs='?', type=str, const='',
                       help=''''meta' CDS prediction AND single domain filter
[optional: path/to/draft/genome]
[default: all inputs]
-----------------------------------------------''')
    group.add_argument('--nofilter', metavar='-', nargs='?', type=str, const='',
                       help='''turn off domain filter
[optional: path/to/input/fasta]
[default: all inputs]
-----------------------------------------------''')
    group.add_argument('--molecule', metavar='',
                       choices=['genome', 'gene', 'protein'], type=str,
                       help='''force molecule type: genome / gene / protein
[default: guess molecule type]
-----------------------------------------------''')
    group.add_argument('--lib', metavar='hmm', type=str, default=lib,
                       help='''path/to/custom/HMM/library.hmm
-----------------------------------------------''')
    group.add_argument('-v', action='store_true', default=False,
                       help='''print version and exit
-----------------------------------------------''')
    group.add_argument('--logo', action='store_true', default=False,
                       help='''super secret surprise!
-----------------------------------------------''')
    group.add_argument("-h", action="help", help='''show this help message and exit''')
    parser.add_argument('input', nargs='*', default=['-'], help=SUPPRESS)
    args = parser.parse_args()

    if args.v is True:
        exit(__version__)

    if args.logo is True:
        exit(print_logo())

    # Some quick setup checks
    # Check database folder
    if not path.isdir(iromppath):
        exit(f'[!] {iromppath} is not an existing directory')
    else:
        plug = iromppath + '/PF07715.hmm'
        if not path.isfile(plug):
            print(f'[!] {plug} not found, will download')
            fetch_url('https://pfam.xfam.org/family/PF07715/hmm', None, plug)
        receptor = iromppath + '/PF00593.hmm'
        if not path.isfile(receptor):
            print(f'[!] {receptor} not found, will download')
            fetch_url('https://pfam.xfam.org/family/PF00593/hmm', None, receptor)

    # Check library HMM
    lib = args.lib
    if not path.isfile(lib):
        exit(f'[!] {lib} is not a valid file \n'
             f'[!] Try running: sideroscanner-buildhmms')
    else:
        for i in [".h3i", ".h3p", ".h3f", ".h3m"]:
            if not path.isfile(f'{lib}{i}'):
                print(f'[!] {lib} is not pressed')
                run_hmmpress(lib)
                break

    if args.f is not None:
        if not path.isfile(flankpath+'/flankdb.psq'):
            exit(f'[!] {flankpath}/flankdb.psq not found\n'
                 f'[!] Try running: sideroscanner-builddbs -db flankdb')

    if args.l is not None:
        if not path.isfile(plspath+'/plsdb.fna.nsq') and not path.isfile(mgepath+'/mgedb.nsq'):
            exit(f'[!] {plspath}/plsdb.fna.nsq and {mgepath}/mgedb.nsq not found\n'
                 f'[!] Try running: sideroscanner-builddbs -db plsdb mgedb')

    if args.b is not None:
        if not path.isfile(furpath+'/fur.meme'):
            exit(f'[!] {furpath}/fur.meme not found')

    # Sanity checks passed, assuming good to go
    print(f'[|] \033[4m{__title__} {__version__}\033[0m')
    print(f'[|] Your system is {uname()[0]}')
    if 'Linux' not in uname()[0]:
        print(f'[!] Warning: SideroScanner has not been tested on {uname()[0]}')
    print(f'[|] {datetime.today().strftime("%Y-%m-%d-%H:%M:%S")}')
    if args.t > cpu_count():
        print(f'[!] Number of threads exceeds available CPUs, will use: {cpu_count()}')
        threads = str(cpu_count())
    else:
        threads = str(args.t)
        print(f'[|] Using {threads} threads...')

    if args.o is not None:
        out_df = pd.DataFrame()

    # Iterate over input files
    for file in args.input:
        print('-' * int(get_terminal_size()[0]))

        # Check input is fasta/fastq
        seq = check_seq(file)
        if seq is not None:
            name = path.splitext(path.basename(str(file)))[0]
            print(f'[-] Analysing {name}')
        else:
            continue

        # Obtain proteins
        proteins, input_type, lowqual = proteins_from_seq(seq, args.lowqual, args.molecule)
        if proteins is None:
            continue

        # Filter
        if args.nofilter is not None:
            if len(args.nofilter) == 0 or file in args.nofilter:
                iromps = proteins
            else: iromps = domain_filter(proteins, iromppath, lowqual, threads)
        else: iromps = domain_filter(proteins, iromppath, lowqual, threads)

        if len(iromps) == 0:
            print('[!] No significant hits')
            continue

        # Annotate
        def annotation_pool(query):
            return annotate(query, input_type, args.lib, threads)

        with Pool(16) as p:
            print("[>] Running hmmscan...   ", end="", flush=True)
            hits = pd.concat(
                p.map(annotation_pool,
                [rec.format("fasta") for rec in parse(StringIO(iromps),
                                                      "fasta")])).reset_index(drop=True)

        if hits is None:
            print('[!] No significant hits')
            continue
        else:
            print(f'Annotated {len(hits.index)} proteins')

        if args.f is not None:
            if input_type != 'genome':
                print(f'[!] Cannot screen flanking CDS in {input_type} input file')
            else:
                hits = flank_screen(proteins, hits, flankpath, args.f, threads)

        if args.l is not None:
            if input_type != 'genome':
                print(f'[!] Cannot screen plasmids/MGEs in {input_type} input file')
            else:
                hits = plasmid_mge_screen(seq, plspath, mgepath, hits, args.l, threads)

        if args.b is not None:
            if input_type != 'genome':
                print(f'[!] Cannot screen Fur binding sites in {input_type} input file')
            else:
                hits = tfbs_screen(seq, furpath, hits, args.b)

        if args.e is not None:
            export_proteins(iromps, args.e, name, hits)

        # Tidying up
        hits = hits.drop(columns=['contig']).fillna("-")

        if args.o is None:
            print(hits.to_markdown(index=False))

        else:
            hits.insert(0, 'sample', name)
            out_df = out_df.append(hits)

    if args.o is not None and not out_df.empty:
        out_df.to_csv(args.o, index=False)
        print(f"[-] Written results to: {args.o}")
