#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'Tom Stanton'
__title__ = 'SideroScanner'
__version__ = '0.0.2'
__author_email__ = 'T.D.Stanton@sms.ed.ac.uk'
__description__ = 'A tool for annotating IROMPs in bacteria'
__license__ = 'gpl-3.0'


from argparse import RawTextHelpFormatter, ArgumentParser
from datetime import datetime
from os import remove, uname, cpu_count
from os.path import dirname, isfile
from glob import glob
from shutil import get_terminal_size

import sideroscanner
from sideroscanner.methods.build_flankdb import get_flankdb
from sideroscanner.methods.build_mgedb import get_mgedb
from sideroscanner.methods.build_plsdb import get_plsdb


if __name__ == "__main__":

    parser = ArgumentParser(add_help=False,
                                     formatter_class=RawTextHelpFormatter,
                                     usage="sideroscanner-builddbs plsdb/mgedb/flankdb/all [options]",
                                     description='''
SideroScannner: a tool for annotating IROMPs in bacteria
-----------------------------------------------------------------------''')
    parser.add_argument('db', nargs='+', #help=SUPPRESS,
                 choices=['plsdb', 'mgedb', 'flankdb', 'all'],
                 default=['all'])

    group = parser.add_argument_group("Options")
    group.add_argument('--keep', action='store_true',
                       help='''keep database fasta files
-----------------------------------------------''')
    group.add_argument('-t', metavar='int', type=int, default=cpu_count(),
                       help=f'''number of threads [default: {cpu_count()}]
-----------------------------------------------''')
    group.add_argument('--overwrite', action='store_true', default=False,
                       help='''overwrite pre-existing databases
-----------------------------------------------''')
    group.add_argument("-h", action="help", help='''show this help message and exit''')
    args = parser.parse_args()

    print(f'[|] \033[4m{__title__} {__version__}\033[0m')
    print(f'[|] Your system is {uname()[0]}')
    if 'Linux' not in uname()[0]:
        print(f'[!] Warning: SideroScanner has not been tested on {uname()[0]}')
    print(f'[|] {datetime.today().strftime("%Y-%m-%d-%H:%M:%S")}')
    if args.t > cpu_count():
        print(f'[!] Number of threads exceeds available CPUs, will use: {cpu_count()}')
        threads = str(cpu_count())
    else:
        threads = str(args.t)
        print(f'[|] Using {threads} threads...')

    dbpath = f'{dirname(sideroscanner.__file__)}/data'

    db_choices = args.db
    if 'all' in db_choices:
        db_choices = ['plsdb', 'mgedb', 'flankdb']

    if not args.overwrite:
        db_list = []
        for db in db_choices:
            if [n for n in glob(f'{dbpath}/{db}/{db}.*sq') if isfile(n)]:
                answer = None
                while answer not in ("y", "n"):
                    answer = input(f'[!] {db} already exists, overwrite? [y/n]: ')
                    if answer == "y":
                        db_list.append(db)
                    elif answer == "n":
                        continue
                    else:
                        print("[!] Please enter [y] or [n]: ")
            else:
                db_list.append(db)

    else:
        db_list = db_choices

    if not db_list:
        exit('[!] All database files exist, exiting')


    for i in db_list:
        print('-' * int(get_terminal_size()[0]))

        if i == 'flankdb':
            get_flankdb(f'{dbpath}/{i}', threads)
        if i == 'mgedb':
            get_mgedb(f'{dbpath}/{i}')
        if i == 'plsdb':
            get_plsdb(f'{dbpath}/{i}')

        if args.keep is False:
            remove(f'{dbpath}/{i}/{i}')
